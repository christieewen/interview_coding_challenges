#Best Time to Buy and Sell Stock

#Solution

#https://leetcode.com/explore/featured/card/top-interview-questions-easy/97/dynamic-programming/572/
"""
Say you have an array for which the ith element is the price of a given stock on day i.

If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.

Note that you cannot sell a stock before you buy one.

Example 1:

Input: [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
             Not 7-1 = 6, as selling price needs to be larger than buying price.
Example 2:

Input: [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.
"""

# Solution is to find the maximum spread.
# Find the min and max.  Order matters.
# Use enumerate to iterate for index and value
# Rules:
# day of buy < day of sell
# buy price < sell price

# What are some approaches?  min / max heap?

# Walk through
# 0, 7
# 1, 6
# ...

class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if not prices:
            return 0
        
        max_spread = 0
        
        for i in range(len(prices)-1): # don't need the last item for the buy.
            sell_price = max(prices[i+1:]) # everything after the buy
            spread = sell_price - prices[i]
            if spread > max_spread:
                max_spread = spread
        return max_spread
